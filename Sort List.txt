/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* merge(ListNode * l1, ListNode * l2)
    {
        if(l1 == NULL)
        {
            return l2;
        }
        if(l2 == NULL)
        {
            return l1;
        }
        ListNode * ans = new ListNode(-1);
        ListNode * tail = ans;
        while(l1 != NULL && l2 != NULL)
        {
            if(l1 -> val <= l2 -> val)
            {
                tail -> next = l1;
                l1 = l1 -> next;
            }
            else
            {
                tail -> next = l2;
                l2 = l2 -> next;
            }
            tail = tail -> next;
        }
        if(l1 != NULL)
        {
            tail -> next = l1;
            l1 = l1 -> next;
        }
        if(l2 != NULL)
        {
            tail -> next = l2;
            l2 = l2 -> next;
        }
        return ans -> next;
    }
    int count(ListNode * head)
    {
        if(head == NULL)
        {
            return 0;
        }
        int c = 0;
        while(head != NULL)
        {
            c++;
            head = head -> next;
        }
        return c;
    }
    ListNode* sortList(ListNode* head) {
        if(head == NULL || head -> next == NULL)
        {
            return head;
        }
        int length = count(head);
        int mid = length / 2;
        ListNode * temp = head;
        ListNode * curr = NULL;
        while(mid--)
        {
            curr = temp;
            temp = temp -> next;
        }
        curr -> next = NULL;
        ListNode * l1 = sortList(head);
        ListNode * l2 = sortList(temp);
        return merge(l1,l2);
    }
};