/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode * merge(ListNode * l1, ListNode * l2)
    {
        if(l1 == NULL)
        {
            return l2;
        }
        if(l2 == NULL)
        {
            return l1;
        }
        ListNode * ans = new ListNode(-1);
        ListNode * tail = ans;
        while(l1 != NULL && l2 != NULL)
        {
            if(l1 -> val <= l2 -> val)
            {
                tail -> next = l1;
                l1 = l1 -> next;
            }
            else
            {
                tail -> next = l2;
                l2 = l2 -> next;
            }
            tail = tail -> next;
        }
        if(l1 != NULL)
        {
            tail -> next = l1;
            l1 = l1 -> next;
        }
        if(l2 != NULL)
        {
            tail -> next = l2;
            l2 = l2 -> next;
        }
        return ans -> next;
    }
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.size() == 0)
        {
            return NULL;
        }
        ListNode * ans = lists[0];
        for(int i = 1 ; i < lists.size() ; i++)
        {
            ans = merge(ans,lists[i]);
        }
        return ans;
    }
};