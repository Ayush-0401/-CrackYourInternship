/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode * reverse(ListNode * head)
    {
        if(head == NULL || head -> next == NULL)
        {
            return head;
        }
        ListNode * ans = NULL;
        while(head != NULL)
        {
            ListNode * t = head;
            head = head -> next;
            t -> next = ans;
            ans = t;
        }
        return ans;
    }
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode * r1 = reverse(l1);
        ListNode * r2 = reverse(l2);
        ListNode * ans = new ListNode(0);
        ListNode * tail = ans;
        int carry = 0;
        while(r1 != NULL || r2 != NULL || carry != 0)
        {
            int x = (r1 == NULL) ? 0 : r1 -> val;
            int y = (r2 == NULL) ? 0 : r2 -> val;
            int sum = x + y + carry;
            carry = sum / 10;
            int t = sum % 10;
            ListNode * temp = new ListNode(t);
            tail -> next = temp;
            tail = temp;
            r1 = (r1 == NULL) ? NULL : r1 -> next;
            r2 = (r2 == NULL) ? NULL : r2 -> next;
        }
        ListNode * a = ans;
        ans = ans -> next;
        delete(a);
        return reverse(ans);
    }
};